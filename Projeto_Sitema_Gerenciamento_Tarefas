#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX_TAREFAS 100
#define NUM_CAMPOS 4
#define TAM_CAMPO 50

// Protótipos das funções
void cadastrarTarefa(char tarefas[][NUM_CAMPOS][TAM_CAMPO], int *quantidade);
void listarTarefas(char tarefas[][NUM_CAMPOS][TAM_CAMPO], int quantidade);
void editarTarefa(char tarefas[][NUM_CAMPOS][TAM_CAMPO], int quantidade);
void excluirTarefa(char tarefas[][NUM_CAMPOS][TAM_CAMPO], int *quantidade);
void salvarTarefasEmArquivo(char tarefas[][NUM_CAMPOS][TAM_CAMPO], int quantidade);
void limparBuffer();

int main() {
    char tarefas[MAX_TAREFAS][NUM_CAMPOS][TAM_CAMPO];
    int quantidade = 0;
    int opcao;

    do {
        printf("\n=== Sistema de Gerenciamento de Tarefas ===\n");
        printf("1. Cadastrar Tarefa\n");
        printf("2. Listar Tarefas\n");
        printf("3. Editar Tarefa\n");
        printf("4. Excluir Tarefa\n");
        printf("5. Salvar Tarefas em Arquivo\n");
        printf("6. Sair\n");
        printf("Escolha uma opcao: ");
        scanf("%d", &opcao);
        limparBuffer();

        switch(opcao) {
            case 1:
                cadastrarTarefa(tarefas, &quantidade);
                break;
            case 2:
                listarTarefas(tarefas, quantidade);
                break;
            case 3:
                editarTarefa(tarefas, quantidade);
                break;
            case 4:
                excluirTarefa(tarefas, &quantidade);
                break;
            case 5:
                salvarTarefasEmArquivo(tarefas, quantidade);
                break;
            case 6:
                printf("Saindo do sistema...\n");
                break;
            default:
                printf("Opcao invalida!\n");
        }
    } while(opcao != 6);

    return 0;
}

void limparBuffer() {
    int c;
    while ((c = getchar()) != '\n' && c != EOF);
}

void cadastrarTarefa(char tarefas[][NUM_CAMPOS][TAM_CAMPO], int *quantidade) {
    if (*quantidade >= MAX_TAREFAS) {
        printf("Limite de tarefas atingido!\n");
        return;
    }

    printf("\n--- Cadastro de Nova Tarefa ---\n");
    
    printf("Titulo: ");
    fgets(tarefas[*quantidade][0], TAM_CAMPO, stdin);
    tarefas[*quantidade][0][strcspn(tarefas[*quantidade][0], "\n")] = '\0';

    printf("Descricao: ");
    fgets(tarefas[*quantidade][1], TAM_CAMPO, stdin);
    tarefas[*quantidade][1][strcspn(tarefas[*quantidade][1], "\n")] = '\0';

    printf("Prioridade (Baixa/Media/Alta): ");
    fgets(tarefas[*quantidade][2], TAM_CAMPO, stdin);
    tarefas[*quantidade][2][strcspn(tarefas[*quantidade][2], "\n")] = '\0';

    printf("Status (Pendente/Em andamento/Concluida): ");
    fgets(tarefas[*quantidade][3], TAM_CAMPO, stdin);
    tarefas[*quantidade][3][strcspn(tarefas[*quantidade][3], "\n")] = '\0';

    (*quantidade)++;
    printf("Tarefa cadastrada com sucesso!\n");
}

void listarTarefas(char tarefas[][NUM_CAMPOS][TAM_CAMPO], int quantidade) {
    if (quantidade == 0) {
        printf("\nNenhuma tarefa cadastrada!\n");
        return;
    }

    printf("\n--- Lista de Tarefas ---\n");
    for (int i = 0; i < quantidade; i++) {
        printf("\nTarefa %d\n", i + 1);
        printf("Titulo: %s\n", tarefas[i][0]);
        printf("Descricao: %s\n", tarefas[i][1]);
        printf("Prioridade: %s\n", tarefas[i][2]);
        printf("Status: %s\n", tarefas[i][3]);
        printf("----------------------");
    }
}

void editarTarefa(char tarefas[][NUM_CAMPOS][TAM_CAMPO], int quantidade) {
    if (quantidade == 0) {
        printf("\nNenhuma tarefa para editar!\n");
        return;
    }

    listarTarefas(tarefas, quantidade);
    
    int indice;
    printf("\nDigite o numero da tarefa que deseja editar: ");
    scanf("%d", &indice);
    limparBuffer();
    
    if (indice < 1 || indice > quantidade) {
        printf("Indice invalido!\n");
        return;
    }

    indice--; // Ajusta para índice interno

    printf("\n--- Editando Tarefa %d ---\n", indice + 1);
    
    printf("Novo Titulo [%s]: ", tarefas[indice][0]);
    fgets(tarefas[indice][0], TAM_CAMPO, stdin);
    if (tarefas[indice][0][0] != '\n') {
        tarefas[indice][0][strcspn(tarefas[indice][0], "\n")] = '\0';
    } else {
        tarefas[indice][0][0] = '\0';
    }

    printf("Nova Descricao [%s]: ", tarefas[indice][1]);
    fgets(tarefas[indice][1], TAM_CAMPO, stdin);
    if (tarefas[indice][1][0] != '\n') {
        tarefas[indice][1][strcspn(tarefas[indice][1], "\n")] = '\0';
    } else {
        tarefas[indice][1][0] = '\0';
    }

    printf("Nova Prioridade [%s]: ", tarefas[indice][2]);
    fgets(tarefas[indice][2], TAM_CAMPO, stdin);
    if (tarefas[indice][2][0] != '\n') {
        tarefas[indice][2][strcspn(tarefas[indice][2], "\n")] = '\0';
    } else {
        tarefas[indice][2][0] = '\0';
    }

    printf("Novo Status [%s]: ", tarefas[indice][3]);
    fgets(tarefas[indice][3], TAM_CAMPO, stdin);
    if (tarefas[indice][3][0] != '\n') {
        tarefas[indice][3][strcspn(tarefas[indice][3], "\n")] = '\0';
    } else {
        tarefas[indice][3][0] = '\0';
    }

    printf("Tarefa atualizada com sucesso!\n");
}
void excluirTarefa(char tarefas[][NUM_CAMPOS][TAM_CAMPO], int *quantidade) {
    if (*quantidade == 0) {
        printf("\nNenhuma tarefa para excluir!\n");
        return;
    }

    listarTarefas(tarefas, *quantidade);
    
    int indice;
    printf("\nDigite o numero da tarefa que deseja excluir: ");
    scanf("%d", &indice);
    limparBuffer();
    
    if (indice < 1 || indice > *quantidade) {
        printf("Indice invalido!\n");
        return;
    }

    indice--; // Ajusta para índice interno

    for (int i = indice; i < *quantidade - 1; i++) {
        for (int j = 0; j < NUM_CAMPOS; j++) {
            strcpy(tarefas[i][j], tarefas[i + 1][j]);
        }
    }

    (*quantidade)--;
    printf("Tarefa excluida com sucesso!\n");
}
